SELECT
    -- Format the month start date into 'YYYY-MM' format for reporting (using the previous month).
    DATE_FORMAT(periods.month_start, '%Y-%m') AS report_month,

    -- Include the queue ID for grouping and reporting purposes.
    j.queue_id,

    -- Calculate the average pending hours for jobs in the previous month.
    AVG(
        TIMESTAMPDIFF(SECOND, j.submission_date, j.start_time) / 3600
    ) AS pend_hours,

    -- Calculate the total GPU hours used by jobs in the previous month.
    SUM(
        TIMESTAMPDIFF(
            SECOND,
            GREATEST(j.start_time, periods.month_start),
            LEAST(IFNULL(j.complete_date, periods.month_end), periods.month_end)
        ) / 3600 * j.ngpu -- Convert the time difference to hours and multiply by the number of GPUs used.
    ) AS gpu_hours
FROM (
    -- Generate a list of start and end dates for the previous month.
    SELECT
        -- Get the 1st day of the previous month.
        DATE_FORMAT(DATE_ADD(LAST_DAY(NOW()), INTERVAL -1 MONTH), '%Y-%m-01') AS month_start,

        -- Get the last day of the previous month.
        LAST_DAY(DATE_ADD(LAST_DAY(NOW()), INTERVAL -1 MONTH)) AS month_end
) periods
-- Join the jobs table to the generated period ranges to aggregate GPU usage and pending hours.
LEFT JOIN job_hal_mlaas j
ON 
    -- Ensure the job starts before the period's end date.
    j.start_time < periods.month_end

    -- Exclude jobs with a '0000-00-00 00:00:00' start time (indicating the job hasn't started).
    AND j.start_time != '0000-00-00 00:00:00'

    -- Include jobs that are either completed or incomplete but overlap with the period.
    AND (j.complete_date >= periods.month_start OR j.complete_date IS NULL)
WHERE
    -- Filter jobs to include only those in the specified queues.
    j.queue_id IN ('mlaas', 'mlaas_a100', 'mlaas_h100', 'mlaas_p40')
GROUP BY
    -- Group the results by the period's start and end dates and queue ID.
    periods.month_start, periods.month_end, j.queue_id

UNION ALL

-- Blended utilization for weighted average calculation
SELECT
    -- Same month for the blended utilization row
    DATE_FORMAT(periods.month_start, '%Y-%m') AS report_month,

    -- A special label for blended utilization
    'blended_utilization' AS queue_id,

    -- No need to calculate pending hours for the blended utilization
    NULL AS pend_hours,

    -- Calculate the weighted average of GPU hours based on the provided formula
    SUM(
        CASE 
            WHEN j.queue_id = 'mlaas' THEN 1 * (TIMESTAMPDIFF(SECOND, GREATEST(j.start_time, periods.month_start), LEAST(IFNULL(j.complete_date, periods.month_end), periods.month_end)) / 3600 * j.ngpu)
            WHEN j.queue_id = 'mlaas_a100' THEN 2 * (TIMESTAMPDIFF(SECOND, GREATEST(j.start_time, periods.month_start), LEAST(IFNULL(j.complete_date, periods.month_end), periods.month_end)) / 3600 * j.ngpu)
            WHEN j.queue_id = 'mlaas_h100' THEN 4 * (TIMESTAMPDIFF(SECOND, GREATEST(j.start_time, periods.month_start), LEAST(IFNULL(j.complete_date, periods.month_end), periods.month_end)) / 3600 * j.ngpu)
            ELSE 0
        END
    ) / 7 AS gpu_hours
FROM (
    -- Same period calculation as above.
    SELECT
        DATE_FORMAT(DATE_ADD(LAST_DAY(NOW()), INTERVAL -1 MONTH), '%Y-%m-01') AS month_start,
        LAST_DAY(DATE_ADD(LAST_DAY(NOW()), INTERVAL -1 MONTH)) AS month_end
) periods
-- Join the jobs table as before for the blended utilization.
LEFT JOIN job_hal_mlaas j
ON 
    j.start_time < periods.month_end
    AND j.start_time != '0000-00-00 00:00:00'
    AND (j.complete_date >= periods.month_start OR j.complete_date IS NULL)
WHERE
    j.queue_id IN ('mlaas', 'mlaas_a100', 'mlaas_h100', 'mlaas_p40')
GROUP BY
    periods.month_start, periods.month_end
ORDER BY
    report_month DESC, queue_id;
