<template>
  <div class="form-container">
    <h2 class="text-xl font-bold mb-4">Add Outage</h2>
    <form @submit.prevent="handleSubmit">
      <div class="form-group">
        <label for="start">Start Date and Time</label>
        <input
          id="start"
          v-model="form.start"
          type="datetime-local"
          class="form-control"
        />
      </div>

      <div class="form-group">
        <label for="outageType">Outage Type</label>
        <select id="outageType" v-model="form.outageType" class="form-control">
          <option>Patching</option>
          <option>GPU</option>
          <option>Compute</option>
          <option>VDI</option>
          <option>Storage</option>
          <option>Change</option>
          <option>PBS</option>
          <option>DTR</option>
          <option>HPC</option>
          <option>LDAP</option>
          <option>N/A</option>
        </select>
      </div>

      <div class="form-group">
        <label for="service">Service</label>
        <select id="service" v-model="form.service" class="form-control">
          <option>MLaaS</option>
          <option>DT4D</option>
          <option>Network</option>
          <option>Domain</option>
          <option>DTR</option>
          <option>SVDI</option>
        </select>
      </div>

      <div class="form-group">
        <label for="planned">Planned</label>
        <select id="planned" v-model="form.planned" class="form-control">
          <option>Yes</option>
          <option>No</option>
        </select>
      </div>

      <div class="form-group">
        <label for="comment">Comment</label>
        <textarea
          id="comment"
          v-model="form.comment"
          class="form-control"
          rows="4"
        ></textarea>
      </div>

      <div class="form-group">
        <label for="engineer">Engineer</label>
        <input
          id="engineer"
          v-model="form.engineer"
          type="text"
          class="form-control"
        />
      </div>

      <div class="button-group">
        <button type="submit" class="submit-button">Submit</button>
      </div>
    </form>

    <!-- Optional: show success/error messages -->
    <p v-if="successMessage" class="success-message">{{ successMessage }}</p>
    <p v-if="errorMessage" class="error-message">{{ errorMessage }}</p>
  </div>
</template>

<script>
export default {
  name: "OutageForm",
  data() {
    return {
      form: this.getDefaultFormValues(),
      successMessage: "",
      errorMessage: "",
    };
  },
  methods: {
    getDefaultFormValues() {
      const rightNow = new Date();

      const currentYear = rightNow.getFullYear();
      const currentMonth = String(rightNow.getMonth() + 1).padStart(2, '0');
      const currentDay = String(rightNow.getDate()).padStart(2, '0');
      const formattedDate = `${currentYear}-${currentMonth}-${currentDay}`;

      const currentHours = String(rightNow.getHours()).padStart(2, '0');
      const currentMinutes = String(rightNow.getMinutes()).padStart(2, '0');
      const formattedTime = `${currentHours}:${currentMinutes}`;

      return {
        start: `${formattedDate}T${formattedTime}`, // Combine date and time for start
        outageType: "",
        service: "",
        planned: "",
        end: "",
        comment: "",
        engineer: "",
      };
    },
    
    async handleSubmit() {
      try {
        // Convert the local time to UTC before sending to the backend
        const localStart = new Date(this.form.start);
        const utcStart = new Date(localStart.getTime() - localStart.getTimezoneOffset() * 60000).toISOString();

        // Prepare the payload
        const outagePayload = {
          start: utcStart, // Send the UTC time to the backend
          outageType: this.form.outageType,
          service: this.form.service,
          engineer: this.form.engineer,
        };

        const outageResponse = await fetch("http://127.0.0.1:5000/outages", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(outagePayload),
        });

        if (!outageResponse.ok) {
          throw new Error("Failed to save outage");
        }

        const outageData = await outageResponse.json();

        // Save the comment
        const commentPayload = {
          outage_id: outageData.id,
          comment: this.form.comment,
          engineer: this.form.engineer,
        };

        const commentResponse = await fetch("http://127.0.0.1:5000/comments", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(commentPayload),
        });

        if (!commentResponse.ok) {
          throw new Error("Failed to save comment");
        }

        await commentResponse.json();

        // Reset the form
        this.form = this.getDefaultFormValues();

        // Redirect to the Outages page
        this.$router.push("/");
      } catch (error) {
        console.error("Error submitting form:", error);
        alert("Failed to save outage or comment.");
      }
    },

    formatTimestamp(timestamp) {
      if (!timestamp) return ''; // Handle null or undefined values gracefully
      try {
        const date = new Date(timestamp);
        if (isNaN(date.getTime())) {
          throw new Error("Invalid timestamp");
        }
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
      } catch (error) {
        console.error("Error formatting timestamp:", error);
        return ''; // Return an empty string if the timestamp is invalid
      }
    },
  },
};
</script>

<style scoped>
/* Success/error styles remain unchanged */
.success-message {
  color: #38a169; /* green */
  margin-top: 1rem;
}
.error-message {
  color: #e53e3e; /* red */
  margin-top: 1rem;
}

/* Updated Chrome autofill fix for dark background */
input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus,
select:-webkit-autofill,
select:-webkit-autofill:hover,
select:-webkit-autofill:focus {
  /* Change from white to your dark background color */
  -webkit-box-shadow: 0 0 0 1000px #2d3748 inset !important;
  box-shadow: 0 0 0 1000px #2d3748 inset !important;
  -webkit-text-fill-color: #ffffff !important;
  caret-color: #ffffff;
  border-color: #4a5568;
  transition-delay: 9999s;
  transition-property: background-color;
}

/* Remove the animation approach since we're directly setting colors */
</style>



That is an entry form for my vue application.  Here is the backend, can you make the necessary adjustments to this form entry page: from flask import Flask, request, jsonify
import mysql.connector
from mysql.connector import Error
from flask_cors import CORS
from dotenv import load_dotenv
import os
import logging
from datetime import datetime, timezone

Load env variables from .env
load_dotenv() # take environment variables from .env

app = Flask(name)
CORS(app) # Allow cross-origin requests from Vue

Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(name)

get values from .env
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_USER = os.getenv("DB_USER", "root")
DB_PASSWORD = os.getenv("DB_PASSWORD", "")
DB_NAME = os.getenv("DB_NAME", "outage_tracker")
DB_PORT = os.getenv("DB_PORT", 3306)

def get_connection():
"""Create and return a new MySQL database connection."""
conn = mysql.connector.connect(
host=DB_HOST,
user=DB_USER,
password=DB_PASSWORD,
database=DB_NAME,
port=DB_PORT
)
cursor = conn.cursor()
cursor.execute("SET time_zone = '+00:00';") # Set session timezone to UTC
cursor.close()
return conn

@app.route("/")
def home():
logger.info("Home endpoint called")
return "Outage Tracker Flask API is running!"

@app.route("/init", methods=["GET"])
def init_db():
"""Create the 'outages' table if it doesn't exist."""
logger.info("Init DB endpoint called")
try:
connection = get_connection()
cursor = connection.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS outage (
id INT AUTO_INCREMENT PRIMARY KEY,
start DATETIME NOT NULL,
end DATETIME,
description TEXT
)
""")
connection.commit()
cursor.close()
connection.close()
logger.info("Outage table created successfully")
return jsonify({"message": "Outage table created successfully"}), 200
except Error as e:
logger.error(f"Error creating outage table: {e}")
return jsonify({"error": str(e)}), 500

-------------------------------------------------------------------
CRUD Endpoints
-------------------------------------------------------------------
@app.route("/outages", methods=["GET"])
def get_outages_with_comments():
logger.info("GETTING OUTAGES WITH COMMENTS ******")
"""Retrieve all outages along with their comments, service names, and outage type names."""
try:
conn = get_connection()
cursor = conn.cursor(dictionary=True)

@app.route("/outages", methods=["POST"])
def create_outage():
logger.info("INSERTING OUTAGES ******")
"""
Create a new outage record.
Expects JSON in body:
{
"service_id": int,
"outage_type_id": int,
"start": "YYYY-MM-DDTHH:MM:SS.sssZ",
"end": "YYYY-MM-DDTHH:MM:SS.sssZ",
"engineer": "string",
"complete": "string"
}
"""
data = request.json
if not data:
return jsonify({"error": "No input data provided"}), 400

@app.route("/outages/int:outage_id", methods=["PUT"])
def update_outage(outage_id):
"""
Update an existing outage record by ID.
Expects JSON in body (same fields as POST).
"""
data = request.json
if not data:
return jsonify({"error": "No input data provided"}), 400

@app.route("/outage/int:outage_id", methods=["PUT"])
def update_outage_partial(outage_id):
"""Update an outage with the given ID using partial data."""
logger.info(f"Update outage endpoint called with id {outage_id}")
data = request.json
if not data:
return jsonify({"error": "No data provided"}), 400

@app.route("/outages/int:outage_id", methods=["DELETE"])
def delete_outage(outage_id):
logger.info("*****DELETING OUTAGE: " + str(outage_id))
"""Delete an outage by ID."""
try:
conn = get_connection()
cursor = conn.cursor()
cursor.execute("DELETE FROM outage WHERE id=%s", (outage_id,))
conn.commit()
cursor.close()
conn.close()
if cursor.rowcount == 0:
return jsonify({"error": f"No outage found with id {outage_id}"}), 404
return jsonify({"message": f"Outage {outage_id} deleted"})
except Error as e:
return jsonify({"error": str(e)}), 500

@app.route("/comments", methods=["POST"])
def add_comment():
logger.info("ADDING COMMENT ******")
"""
Add a comment to a specific outage.
Expects JSON in body:
{
"outage_id": int,
"comment": "string",
"engineer": "string"
}
"""
data = request.json
if not data or "outage_id" not in data or "comment" not in data:
return jsonify({"error": "Invalid input data"}), 400

@app.route("/outages/int:outage_id/comments", methods=["GET"])
def get_comments_for_outage(outage_id):
logger.info(f"GETTING COMMENTS FOR OUTAGE {outage_id} ******")
"""Retrieve all comments for a specific outage."""
try:
conn = get_connection()
cursor = conn.cursor(dictionary=True)
cursor.execute("SELECT * FROM comment WHERE outage_id = %s", (outage_id,))
comments = cursor.fetchall()
cursor.close()
conn.close()

@app.route("/services", methods=["GET"])
def get_services():
"""Retrieve all services."""
logger.info("GETTING ALL SERVICES ******")
try:
conn = get_connection()
cursor = conn.cursor(dictionary=True)
cursor.execute("SELECT id, name FROM service")
services = cursor.fetchall()
cursor.close()
conn.close()
return jsonify(services) # Returns a list of services
except Error as e:
logger.error(f"Error retrieving services: {e}")
return jsonify({"error": str(e)}), 500

@app.route("/services/int:service_id/outage-types", methods=["GET"])
def get_outage_types_for_service(service_id):
"""Retrieve outage types for a specific service."""
logger.info(f"GETTING OUTAGE TYPES FOR SERVICE {service_id} ******")
try:
conn = get_connection()
cursor = conn.cursor(dictionary=True)
cursor.execute("""
SELECT ot.id, ot.name
FROM outage_type ot
JOIN service_outage_type sot ON ot.id = sot.outage_type_id
WHERE sot.service_id = %s
""", (service_id,))
outage_types = cursor.fetchall()
cursor.close()
conn.close()
return jsonify(outage_types) # Returns a list of outage types
except Error as e:
logger.error(f"Error retrieving outage types for service {service_id}: {e}")
return jsonify({"error": str(e)}), 500

-------------------------------------------------------------------
Run Flask App
-------------------------------------------------------------------
if name == "main":
logger.info("Starting Flask app")
with app.app_context():
init_db()
app.run(port=5000, debug=True)
