curl -X POST http://localhost:5000/outages \
     -H "Content-Type: application/json" \
     -d '{
       "date": "2025-01-01",
       "outageType": "Network",
       "start": "09:00:00",
       "end": "10:00:00",
       "duration": "1 hour",
       "comment": "Scheduled maintenance",
       "engineer": "Alice"
     }'


<template>
  <div class="form-container">
    <h2 class="text-xl font-bold mb-4">Add Outage</h2>
    <form @submit.prevent="handleSubmit">
      <div class="form-group">
        <label for="date">Date</label>
        <input
          id="date"
          v-model="form.date"
          type="date"
          class="form-control"
        />
      </div>

      <div class="form-group">
        <label for="outageType">Outage Type</label>
        <input
          id="outageType"
          v-model="form.outageType"
          type="text"
          class="form-control"
        />
      </div>

      <div class="form-group">
        <label for="start">Start</label>
        <input
          id="start"
          v-model="form.start"
          type="time"
          class="form-control"
        />
      </div>

      <div class="form-group">
        <label for="end">End</label>
        <input
          id="end"
          v-model="form.end"
          type="time"
          class="form-control"
        />
      </div>

      <div class="form-group">
        <label for="duration">Duration</label>
        <input
          id="duration"
          v-model="form.duration"
          type="text"
          class="form-control"
        />
      </div>

      <div class="form-group">
        <label for="comment">Comment</label>
        <textarea
          id="comment"
          v-model="form.comment"
          class="form-control"
        ></textarea>
      </div>

      <div class="form-group">
        <label for="engineer">Engineer</label>
        <input
          id="engineer"
          v-model="form.engineer"
          type="text"
          class="form-control"
        />
      </div>

      <div class="button-group">
        <button type="submit" class="submit-button">Submit</button>
      </div>
    </form>

    <!-- Optional: show success/error messages -->
    <p v-if="successMessage" class="success-message">{{ successMessage }}</p>
    <p v-if="errorMessage" class="error-message">{{ errorMessage }}</p>
  </div>
</template>

<script>
export default {
  name: "OutageForm",
  data() {
    return {
      form: {
        date: "",
        outageType: "",
        start: "",
        end: "",
        duration: "",
        comment: "",
        engineer: "",
      },
      successMessage: "",
      errorMessage: "",
    };
  },
  methods: {
    async handleSubmit() {
      this.successMessage = "";
      this.errorMessage = "";

      try {
        // Adjust URL if your backend is at a different address/port
        const response = await fetch("http://localhost:5000/outages", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(this.form),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || "Failed to create outage");
        }

        const result = await response.json();
        this.successMessage = `Outage (ID: ${result.id}) created successfully!`;

        // Clear the form
        this.form = {
          date: "",
          outageType: "",
          start: "",
          end: "",
          duration: "",
          comment: "",
          engineer: "",
        };
      } catch (error) {
        console.error("Error creating outage:", error);
        this.errorMessage = error.message;
      }
    },
  },
};
</script>

<style scoped>
/* Optional: some quick styles if needed */
.success-message {
  color: #38a169; /* green */
  margin-top: 1rem;
}
.error-message {
  color: #e53e3e; /* red */
  margin-top: 1rem;
}
</style>
















SELECT
    -- Format the month start date into 'YYYY-MM' format for reporting.
    DATE_FORMAT(periods.month_start, '%Y-%m') AS report_month,

    -- Include the queue ID for grouping and reporting purposes.
    j.queue_id,

    -- Calculate the GPU utilization for the month.
    ROUND(
        (
            SUM(
                TIMESTAMPDIFF(
                    SECOND,
                    GREATEST(j.start_time, periods.month_start),
                    LEAST(IFNULL(j.complete_date, periods.month_end), periods.month_end)
                ) / 3600 * j.ngpu
            ) / (
                -- Total available hours in the month = GPU Count * Days in Month * Hours in a Day.
                CASE
                    WHEN j.queue_id = 'mlaas' THEN 40
                    WHEN j.queue_id = 'mlaas_a100' THEN 20
                    WHEN j.queue_id = 'mlaas_h100' THEN 48
                END * DATEDIFF(periods.month_end, periods.month_start) * 24
            )
        ) * 100, 2
    ) AS utilization_percentage,

    -- Calculate the weighted average of the utilizations for 'mlaas', 'mlaas_a100', and 'mlaas_h100'.
    ROUND(
        (
            (SUM(CASE
                    WHEN j.queue_id = 'mlaas' THEN
                        TIMESTAMPDIFF(
                            SECOND,
                            GREATEST(j.start_time, periods.month_start),
                            LEAST(IFNULL(j.complete_date, periods.month_end), periods.month_end)
                        ) / 3600 * j.ngpu
                    ELSE 0
                END) * 1) +
            (SUM(CASE
                    WHEN j.queue_id = 'mlaas_a100' THEN
                        TIMESTAMPDIFF(
                            SECOND,
                            GREATEST(j.start_time, periods.month_start),
                            LEAST(IFNULL(j.complete_date, periods.month_end), periods.month_end)
                        ) / 3600 * j.ngpu
                    ELSE 0
                END) * 2) +
            (SUM(CASE
                    WHEN j.queue_id = 'mlaas_h100' THEN
                        TIMESTAMPDIFF(
                            SECOND,
                            GREATEST(j.start_time, periods.month_start),
                            LEAST(IFNULL(j.complete_date, periods.month_end), periods.month_end)
                        ) / 3600 * j.ngpu
                    ELSE 0
                END) * 4)
        ) / (
            7 * DATEDIFF(periods.month_end, periods.month_start) * 24
        ), 2
    ) AS weighted_utilization_percentage
FROM (
    -- Generate a list of start and end dates for the last 6 months.
    SELECT
        -- Generate the 15th of each month as the approximate start date of the reporting period.
        DATE_FORMAT(DATE_ADD(LAST_DAY(NOW()), INTERVAL -m.num MONTH), '%Y-%m-15') AS month_start,

        -- Calculate the last day of the corresponding month as the end of the reporting period.
        LAST_DAY(DATE_ADD(LAST_DAY(NOW()), INTERVAL -m.num MONTH)) AS month_end
    FROM (
        -- Create a simple list of numbers (0 to 5) to represent the last 6 months.
        SELECT 1 AS num
    ) m
) periods
-- Join the jobs table to the generated period ranges to aggregate GPU usage and pending hours.
LEFT JOIN job_hal_mlaas j
ON 
    -- Ensure the job starts before the period's end date.
    j.start_time < periods.month_end

    -- Exclude jobs with a '0000-00-00 00:00:00' start time (indicating the job hasn't started).
    AND j.start_time != '0000-00-00 00:00:00'

    -- Include jobs that are either completed or incomplete but overlap with the period.
    AND (j.complete_date >= periods.month_start OR j.complete_date IS NULL)
WHERE
    -- Filter only jobs in the 'mlaas', 'mlaas_a100', or 'mlaas_h100' queues.
    j.queue_id = 'mlaas' or j.queue_id = 'mlaas_a100' or j.queue_id = 'mlaas_h100' 
GROUP BY
    -- Group the results by the period's start and end dates and queue ID.
    periods.month_start, periods.month_end, j.queue_id
