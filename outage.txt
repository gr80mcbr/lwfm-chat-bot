import { defineStore } from 'pinia';

export const useOutageStore = defineStore('outage', {
  state: () => ({
    outages: [], // List of outages
  }),
  actions: {
    addOutage(outage) {
      this.outages.push(outage);
    },
    removeOutage(index) {
      this.outages.splice(index, 1);
    },
  },
});
};
</script>





import { createApp } from 'vue';
import { createPinia } from 'pinia';
import App from './App.vue';

const app = createApp(App);
app.use(createPinia());
app.mount('#app');




<script>
import { useOutageStore } from '../stores/outage';

export default {
  setup() {
    const outageStore = useOutageStore();
    return { outageStore };
  },
};
</script>




import { createRouter, createWebHistory } from 'vue-router';
import OutageTable from '../components/OutageTable.vue';
import OutageForm from '../components/OutageForm.vue';

const routes = [
  { path: '/', component: OutageTable },
  { path: '/add', component: OutageForm },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

export default router;




import { createApp } from 'vue';
import App from './App.vue';
import router from './router';

createApp(App).use(router).mount('#app');





<template>
  <nav>
    <router-link to="/">Home</router-link> |
    <router-link to="/add">Add Outage</router-link>
  </nav>
  <router-view></router-view>
</template>






# Use a Node image to build the app
FROM node:18 as build-stage
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Use an Nginx image to serve the app
FROM nginx:stable-alpine as production-stage
COPY --from=build-stage /app/dist /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
