WITH month_period AS (
    -- Define the start and end of the previous month
    SELECT 
        DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL -1 MONTH), '%Y-%m-01') AS month_start,
        LAST_DAY(DATE_ADD(CURDATE(), INTERVAL -1 MONTH)) AS month_end
),
queue_utilization AS (
    SELECT
        -- Ensure consistent collation for the queue_id field
        CONVERT(j.queue_id USING utf8) COLLATE utf8_general_ci AS queue_id,
        -- Calculate the total GPU hours used in the previous month, including portions of jobs
        SUM(
            TIMESTAMPDIFF(
                SECOND,
                GREATEST(j.start_time, month_period.month_start), -- Start within the reporting period
                LEAST(IFNULL(j.complete_date, month_period.month_end), month_period.month_end) -- End within the reporting period
            ) / 3600 * j.ngpu -- Convert seconds to hours and multiply by GPUs used
        ) AS gpu_hours,
        -- Calculate the total available GPU hours for the queue
        (
            40 -- Assume 40 GPUs for each queue
            * DATEDIFF(month_period.month_end, month_period.month_start) * 24 -- Total hours in the month
        ) AS total_available_hours
    FROM 
        month_period
    LEFT JOIN job_hal_mlaas j
        ON j.start_time < month_period.month_end -- Include jobs that start before the end of the month
        AND j.start_time != '0000-00-00 00:00:00' -- Exclude invalid start times
        AND (j.complete_date >= month_period.month_start OR j.complete_date IS NULL) -- Include jobs overlapping the start of the month or ongoing
    WHERE 
        j.queue_id IN ('mlaas', 'mlaas_a100', 'mlaas_h100', 'mlaas_p40') -- Filter for specific queues
    GROUP BY 
        j.queue_id
),
blended_utilization AS (
    SELECT 
        -- Set queue_id for blended calculation
        CONVERT('blended' USING utf8) COLLATE utf8_general_ci AS queue_id,
        -- Calculate the blended utilization using the provided formula
        ROUND(
            (1 * COALESCE(SUM(CASE WHEN queue_id = 'mlaas' THEN gpu_hours END), 0) +
             2 * COALESCE(SUM(CASE WHEN queue_id = 'mlaas_a100' THEN gpu_hours END), 0) +
             4 * COALESCE(SUM(CASE WHEN queue_id = 'mlaas_h100' THEN gpu_hours END), 0)) / 7
            / MAX(total_available_hours) * 100, 2
        ) AS utilization_percentage
    FROM queue_utilization
)
-- Combine individual queue utilization and blended utilization
SELECT 
    queue_id,
    ROUND(gpu_hours / total_available_hours * 100, 2) AS utilization_percentage
FROM queue_utilization
UNION ALL
SELECT * FROM blended_utilization
ORDER BY queue_id;
