SELECT
    dp.name AS desktop_pool_name,
    DATE_TRUNC('month', s.start_time) AS session_month,
    s.state,
    COUNT(*) AS session_count
FROM
    session s
JOIN
    desktop_pool dp ON dp.id = s.desktop_pool_id
WHERE
    dp.name IN ('ML_LINUX_NEC', 'ML-LINUX-EC')
GROUP BY
    dp.name,
    DATE_TRUNC('month', s.start_time),
    s.state
ORDER BY
    desktop_pool_name,
    session_month,
    s.state;






version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg14 # Use the latest TimescaleDB with PostgreSQL 14
    container_name: timescaledb
    environment:
      POSTGRES_DB: vdi_reporting
      POSTGRES_USER: reporting-user
      POSTGRES_PASSWORD: testing
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always

volumes:
  pgdata:










SELECT
    j.job_id,
    j.queue_id,
    j.submission_date,
    j.start_time,
    j.complete_date,
    j.ngpu,
    TIMESTAMPDIFF(SECOND, j.submission_date, j.start_time) / 3600 AS pend_hours,
    TIMESTAMPDIFF(
        SECOND,
        GREATEST(j.start_time, '2024-12-01 00:00:00'),
        LEAST(IFNULL(j.complete_date, '2024-12-31 23:59:59'), '2024-12-31 23:59:59')
    ) / 3600 AS gpu_hours,
    CASE
        WHEN j.start_time >= '2024-12-01 00:00:00' AND (j.complete_date <= '2024-12-31 23:59:59' OR j.complete_date IS NULL) THEN 'Full Job in December'
        WHEN j.start_time < '2024-12-01 00:00:00' AND (j.complete_date >= '2024-12-01 00:00:00') THEN 'Started Before, Running in December'
        WHEN j.start_time < '2024-12-01 00:00:00' AND j.complete_date >= '2024-12-01 00:00:00' AND j.complete_date <= '2024-12-31 23:59:59' THEN 'Started Before, Completed in December'
        ELSE 'Not In December'
    END AS job_status
FROM job j
WHERE j.queue_id = 'mlaas'
AND (
    (j.start_time >= '2024-12-01 00:00:00' AND j.start_time < '2025-01-01 00:00:00')
    OR
    (j.complete_date >= '2024-12-01 00:00:00' AND (j.complete_date <= '2024-12-31 23:59:59' OR j.complete_date IS NULL))
)
ORDER BY j.start_time;





SELECT
    DATE_FORMAT(periods.month_start, '%Y-%m') AS report_month,
    j.queue_id,
    AVG(
        TIMESTAMPDIFF(SECOND, j.submission_date, j.start_time) / 3600
    ) AS pend_hours,
    SUM(
        TIMESTAMPDIFF(
            SECOND,
            GREATEST(j.start_time, periods.month_start),
            LEAST(IFNULL(j.complete_date, periods.month_end), periods.month_end)
        ) / 3600 * j.ngpu
    ) AS gpu_hours
FROM (
    SELECT
        DATE_FORMAT(DATE_ADD(LAST_DAY(NOW()), INTERVAL -m.num MONTH), '%Y-%m-15') AS month_start,
        LAST_DAY(DATE_ADD(LAST_DAY(NOW()), INTERVAL -m.num MONTH)) AS month_end
    FROM (
        SELECT 0 AS num 
        UNION ALL SELECT 1 
        UNION ALL SELECT 2 
        UNION ALL SELECT 3 
        UNION ALL SELECT 4 
        UNION ALL SELECT 5
    ) m
) periods
LEFT JOIN job j
ON j.start_time < periods.month_end
AND (j.complete_date >= periods.month_start OR j.complete_date IS NULL)
WHERE j.queue_id = 'mlaas'
GROUP BY periods.month_start, periods.month_end, j.queue_id
ORDER BY periods.month_start DESC;




WITH job_data AS (
    SELECT 
        DATE_FORMAT(submission_date, '%Y-%m') AS report_date,
        GREATEST(
            IF(start_time = '0000-00-00 00:00:00', NOW(), start_time),
            STR_TO_DATE(CONCAT(YEAR(NOW()), '-', MONTH(NOW()) - 6, '-15'), '%Y-%m-%d')
        ) AS actual_start_time,
        LEAST(
            IF(complete_date = '0000-00-00 00:00:00', NOW(), complete_date),
            LAST_DAY(submission_date)
        ) AS actual_end_time,
        TIMESTAMPDIFF(HOUR, submission_date, start_time) AS pend_hours,
        TIMESTAMPDIFF(HOUR, start_time, complete_date) * ngpu AS gpu_hours,
        queue_id
    FROM job_hal_mlaas
    WHERE 
        queue_id = 'mlaas'
        AND submission_date >= DATE_SUB(NOW(), INTERVAL 6 MONTH)
),
monthly_data AS (
    SELECT 
        DATE_FORMAT(actual_start_time, '%Y-%m') AS report_month,
        AVG(pend_hours) AS avg_pend_hours,
        SUM(gpu_hours) AS total_gpu_hours
    FROM job_data
    WHERE 
        actual_start_time >= DATE_SUB(NOW(), INTERVAL 6 MONTH)
    GROUP BY report_month
)
SELECT 
    report_month AS report_date,
    ROUND(avg_pend_hours, 2) AS average_pend_hours_per_job,
    ROUND(total_gpu_hours, 2) AS total_gpu_hours
FROM monthly_data
ORDER BY report_month DESC;



WITH job_duration AS (
    SELECT
        queue_id,
        start_time,
        complete_date,
        ngpu,
        TIMESTAMPDIFF(SECOND, start_time, IFNULL(complete_date, NOW())) / 3600 AS job_duration_hours,
        submission_date,
        CASE
            WHEN start_time = '0000-00-00 00:00:00' THEN NOW()
            ELSE start_time
        END AS actual_start_time,
        CASE
            WHEN complete_date = '0000-00-00 00:00:00' THEN NOW()
            ELSE complete_date
        END AS actual_complete_date
    FROM job_hal_mlaas
    WHERE submission_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
),
monthly_data AS (
    SELECT
        queue_id,
        ngpu,
        job_duration_hours,
        actual_start_time,
        actual_complete_date,
        -- Calculate pend time (difference between submission and start time)
        TIMESTAMPDIFF(SECOND, submission_date, actual_start_time) / 3600 AS pend_time_hours,
        -- Break down job duration for each of the last 6 months
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE - INTERVAL 5 MONTH, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE - INTERVAL 5 MONTH, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_1_duration,
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE - INTERVAL 4 MONTH, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE - INTERVAL 4 MONTH, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_2_duration,
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE - INTERVAL 3 MONTH, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE - INTERVAL 3 MONTH, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_3_duration,
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE - INTERVAL 2 MONTH, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE - INTERVAL 2 MONTH, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_4_duration,
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_5_duration,
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_6_duration
    FROM job_duration
)
SELECT
    queue_id,
    ROUND(SUM(month_1_duration * ngpu), 2) AS `GPU Utilization for {{dateAdd(-5, 'months', now()) | date: 'MMM YYYY'}}`,
    ROUND(SUM(month_2_duration * ngpu), 2) AS `GPU Utilization for {{dateAdd(-4, 'months', now()) | date: 'MMM YYYY'}}`,
    ROUND(SUM(month_3_duration * ngpu), 2) AS `GPU Utilization for {{dateAdd(-3, 'months', now()) | date: 'MMM YYYY'}}`,
    ROUND(SUM(month_4_duration * ngpu), 2) AS `GPU Utilization for {{dateAdd(-2, 'months', now()) | date: 'MMM YYYY'}}`,
    ROUND(SUM(month_5_duration * ngpu), 2) AS `GPU Utilization for {{dateAdd(-1, 'months', now()) | date: 'MMM YYYY'}}`,
    ROUND(SUM(month_6_duration * ngpu), 2) AS `GPU Utilization for {{now() | date: 'MMM YYYY'}}`,
    ROUND(AVG(pend_time_hours), 2) AS `Average Pend Time (hours)`
FROM monthly_data
GROUP BY queue_id
ORDER BY queue_id






WITH job_duration AS (
    SELECT
        sitid,
        site_name,
        job_id,
        start_time,
        complete_date,
        ngpu,
        TIMESTAMPDIFF(SECOND, start_time, IFNULL(complete_date, NOW())) / 3600 AS job_duration_hours,
        submission_date,
        CASE
            WHEN start_time = '0000-00-00 00:00:00' THEN NOW()
            ELSE start_time
        END AS actual_start_time,
        CASE
            WHEN complete_date = '0000-00-00 00:00:00' THEN NOW()
            ELSE complete_date
        END AS actual_complete_date
    FROM job_hal_mlaas
    WHERE submission_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
),
monthly_data AS (
    SELECT
        sitid,
        site_name,
        job_id,
        ngpu,
        job_duration_hours,
        actual_start_time,
        actual_complete_date,
        -- Calculate pend time (difference between submission and start time)
        TIMESTAMPDIFF(SECOND, submission_date, actual_start_time) / 3600 AS pend_time_hours,
        -- Break down job duration for each of the last 6 months
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE - INTERVAL 5 MONTH, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE - INTERVAL 5 MONTH, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_1_duration,
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE - INTERVAL 4 MONTH, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE - INTERVAL 4 MONTH, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_2_duration,
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE - INTERVAL 3 MONTH, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE - INTERVAL 3 MONTH, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_3_duration,
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE - INTERVAL 2 MONTH, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE - INTERVAL 2 MONTH, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_4_duration,
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_5_duration,
        CASE
            WHEN actual_start_time < DATE_FORMAT(CURRENT_DATE, '%Y-%m-01')
            THEN 0
            ELSE LEAST(TIMESTAMPDIFF(SECOND, GREATEST(actual_start_time, DATE_FORMAT(CURRENT_DATE, '%Y-%m-01')), actual_complete_date) / 3600, job_duration_hours)
        END AS month_6_duration
    FROM job_duration
)
SELECT
    sitid,
    site_name,
    job_id,
    ROUND(SUM(month_1_duration * ngpu), 2) AS month_1_gpu_utilization,
    ROUND(SUM(month_2_duration * ngpu), 2) AS month_2_gpu_utilization,
    ROUND(SUM(month_3_duration * ngpu), 2) AS month_3_gpu_utilization,
    ROUND(SUM(month_4_duration * ngpu), 2) AS month_4_gpu_utilization,
    ROUND(SUM(month_5_duration * ngpu), 2) AS month_5_gpu_utilization,
    ROUND(SUM(month_6_duration * ngpu), 2) AS month_6_gpu_utilization,
    ROUND(AVG(pend_time_hours), 2) AS avg_pend_time_hours
FROM monthly_data
GROUP BY sitid, site_name, job_id
ORDER BY site_name, job_id
